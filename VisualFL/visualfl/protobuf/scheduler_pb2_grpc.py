# Copyright 2021 Tianmian Tech. All Rights Reserved.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import visualfl.protobuf.scheduler_pb2 as scheduler__pb2


class SchedulerStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Init = channel.unary_unary(
                '/visualfl.Scheduler/Init',
                request_serializer=scheduler__pb2.Init.REQ.SerializeToString,
                response_deserializer=scheduler__pb2.Init.REP.FromString,
                )
        self.WorkerJoin = channel.unary_unary(
                '/visualfl.Scheduler/WorkerJoin',
                request_serializer=scheduler__pb2.WorkerJoin.REQ.SerializeToString,
                response_deserializer=scheduler__pb2.WorkerJoin.REP.FromString,
                )
        self.WorkerFinish = channel.unary_unary(
                '/visualfl.Scheduler/WorkerFinish',
                request_serializer=scheduler__pb2.WorkerFinish.REQ.SerializeToString,
                response_deserializer=scheduler__pb2.WorkerFinish.REP.FromString,
                )


class SchedulerServicer(object):
    """Missing associated documentation comment in .proto file"""

    def Init(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WorkerJoin(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WorkerFinish(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SchedulerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Init': grpc.unary_unary_rpc_method_handler(
                    servicer.Init,
                    request_deserializer=scheduler__pb2.Init.REQ.FromString,
                    response_serializer=scheduler__pb2.Init.REP.SerializeToString,
            ),
            'WorkerJoin': grpc.unary_unary_rpc_method_handler(
                    servicer.WorkerJoin,
                    request_deserializer=scheduler__pb2.WorkerJoin.REQ.FromString,
                    response_serializer=scheduler__pb2.WorkerJoin.REP.SerializeToString,
            ),
            'WorkerFinish': grpc.unary_unary_rpc_method_handler(
                    servicer.WorkerFinish,
                    request_deserializer=scheduler__pb2.WorkerFinish.REQ.FromString,
                    response_serializer=scheduler__pb2.WorkerFinish.REP.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'visualfl.Scheduler', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Scheduler(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def Init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/visualfl.Scheduler/Init',
            scheduler__pb2.Init.REQ.SerializeToString,
            scheduler__pb2.Init.REP.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WorkerJoin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/visualfl.Scheduler/WorkerJoin',
            scheduler__pb2.WorkerJoin.REQ.SerializeToString,
            scheduler__pb2.WorkerJoin.REP.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WorkerFinish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/visualfl.Scheduler/WorkerFinish',
            scheduler__pb2.WorkerFinish.REQ.SerializeToString,
            scheduler__pb2.WorkerFinish.REP.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
