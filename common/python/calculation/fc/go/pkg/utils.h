/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 19 "utils.go"

#include <stdlib.h>
// ots的数据结构
typedef struct DataItem{
	char * k; //key
	int ksize;//ksize
	char * v; //vaLue
	int vsize;//vsize
	int p; //partition
	char * si; //splitindex
	struct DataItem *next; //next
}DataItem;
struct DataGroup{
	struct DataItem *data; //data
	struct DataGroup *next; //next
};
struct CotsPK{
	char * name;
	int partition;
	char * k;
	int ksize;
	char * splitIndex;
};
struct CgetNext{
	struct CotsPK *startPK;
	struct CotsPK *endPK;
	struct CgetNext *next;
};
struct CotsItem{
	char * k; //key
	int ksize;//ksize
	char * v; //vaLue
	int vsize;//vsize
	char * splitIndex; //splitindex
	struct CotsItem *next; //next
};
struct CotsPartitionsOnePage{
	struct CotsItem *data; //getRange 返回的一批数据
	struct CgetNext *getNext; //表示该 Page 是否有下一个 Page
	struct CotsPartitionsOnePage *next; //指下一个 partition 的 Page
};

static void free_point(char *p){
   free(p);
}
static void free_dataitem(DataItem *p){
   free(p);
}

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


//===================== free ========================
/*
释放char指针的内存
*/
extern void freeCharP(char* p);
extern void freeCotsPartitionPage(struct CotsPartitionsOnePage* page);

//===================== OTS ========================
extern char* getPKNameGo(char* name, GoInt partition);

/**
批量写入数据到OTS
*/
extern char* putAllBatchGroup(char* endpoint, char* instanceName, char* accessKeyId, char* accessKeySecret, char* namespace, char* name, struct DataGroup datagroup);

// 并发获取分片分页
extern struct CotsPartitionsOnePage* getPartitionsOnePage(struct CgetNext* getNext, char* endpoint, char* instanceName, char* accessKeyId, char* accessKeySecret, char* namespace, GoInt32 pageLimit, char* stsToken);

//======================== FC ======================
extern char* callFC(char* inputParam, char* endpoint, char* accessKeyId, char* accessKeySecret, char* serviceName, char* functionName, char* qualifier);
extern char* callSCF(char* url, char* inputParam, char* endpoint, char* accessKeyId, char* accessKeySecret, char* serviceName, char* functionName, char* qualifier);
extern DataItem* memoryFreeTest();
extern void freePoint(DataItem* dataItem);

#ifdef __cplusplus
}
#endif
