/*
 * Copyright 2021 Tianmian Tech. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.welab.wefe.manager.service.contract;

import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.*;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@SuppressWarnings("unchecked")
public class MemberAuthTypeContract extends Contract {
    public static final String[] BINARY_ARRAY = {"", "00fd5b505050506040513d601f19601f82011682018060405250610cfc9190810190612abf565b93508373ffffffffffffffffffffffffffffffffffffffff1663cd30a1d18a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d539190613263565b600060405180830381600087803b158015610d6d57600080fd5b505af1158015610d81573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610de957600080fd5b505af1158015610dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e219190810190612b11565b92508273ffffffffffffffffffffffffffffffffffffffff1663e942b516896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e78919061311a565b600060405180830381600087803b158015610e9257600080fd5b505af1158015610ea6573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b516886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610eff91906131d9565b600060405180830381600087803b158015610f1957600080fd5b505af1158015610f2d573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff1663bf2b70a16040805190810160405280600a81526020017f6669785f69645f3030360000000000000000000000000000000000000000000081525085876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610fbf939291906130bc565b602060405180830381600087803b158015610fd957600080fd5b505af1158015610fed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110119190810190612b63565b91506000905060018212151561102a576000905061104e565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe90505b7f91fa9d6109b9b8b47733f98f4b6858346683ebdf73ba3c2f98b90c0d352f83e1818a8a8a6040516110839493929190612fe0565b60405180910390a180955050505050509392505050565b600060606000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280601081526020017f6d656d6265725f617574685f74797065000000000000000000000000000000008152506040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161114c919061303a565b602060405180830381600087803b15801561116657600080fd5b505af115801561117a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061119e9190810190612b3a565b91508173ffffffffffffffffffffffffffffffffffffffff1663e8434e396040805190810160405280600a81526020017f6669785f69645f303036000000000000000000000000000000000000000000008152508473ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561125657600080fd5b505af115801561126a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061128e9190810190612abf565b6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112c792919061305c565b602060405180830381600087803b1580156112e157600080fd5b505af11580156112f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113199190810190612ae8565b90508073ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561137f57600080fd5b505af1158015611393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113b79190810190612b63565b60001415611425577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd600060405190808252806020026020018201604052801561141557816020015b60608152602001906001900390816114005790505b5081915080905093509350611438565b600061143082611f3b565b819150935093505b50509091565b600080600080600080935061146a87600081518110151561145b57fe5b90602001906020020151610794565b156114f5577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff93507f5157dc1ab0b55c7621be94a34b2ae4228f7d16e8271628060cc027b1a513b12f8488886040516114c593929190612f6b565b60405180910390a17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9450611ba6565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280601081526020017f6d656d6265725f617574685f74797065000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115a0919061303a565b602060405180830381600087803b1580156115ba57600080fd5b505af11580156115ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115f29190810190612b3a565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561165857600080fd5b505af115801561166c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116909190810190612b11565b91508173ffffffffffffffffffffffffffffffffffffffff1663e942b5166040805190810160405280600a81526020017f6669785f69645f303036000000000000000000000000000000000000000000008152506040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161171c919061314f565b600060405180830381600087803b15801561173657600080fd5b505af115801561174a573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b51688600081518110151561177957fe5b906020019060200201516040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016117bb919061322e565b600060405180830381600087803b1580156117d557600080fd5b505af11580156117e9573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b51688600181518110151561181857fe5b906020019060200201516040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161185a919061330d565b600060405180830381600087803b15801561187457600080fd5b505af1158015611888573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b5168860028151811015156118b757fe5b906020019060200201516040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016118f991906132b8565b600060405180830381600087803b15801561191357600080fd5b505af1158015611927573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b51688600381518110151561195657fe5b906020019060200201516040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161199891906131a4565b600060405180830381600087803b1580156119b257600080fd5b505af11580156119c6573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611a1f919061311a565b600060405180830381600087803b158015611a3957600080fd5b505af1158015611a4d573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166331afac366040805190810160405280600a81526020017f6669785f69645f30303600000000000000000000000000000000000000000000815250846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611add92919061308c565b602060405180830381600087803b158015611af757600080fd5b505af1158015611b0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b2f9190810190612b63565b90506001811415611b435760009350611b67565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe93505b7f5157dc1ab0b55c7621be94a34b2ae4228f7d16e8271628060cc027b1a513b12f848888604051611b9a93929190612f6b565b60405180910390a18094505b5050505092915050565b60008060008060008093506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280601081526020017f6d656d6265725f617574685f74797065000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611c66919061303a565b602060405180830381600087803b158015611c8057600080fd5b505af1158015611c94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611cb89190810190612b3a565b92508273ffffffffffffffffffffffffffffffffffffffff16637857d7", "c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611d1e57600080fd5b505af1158015611d32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d569190810190612abf565b91508173ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611dad9190613263565b600060405180830381600087803b158015611dc757600080fd5b505af1158015611ddb573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166328bb21176040805190810160405280600a81526020017f6669785f69645f30303600000000000000000000000000000000000000000000815250846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611e6b92919061305c565b602060405180830381600087803b158015611e8557600080fd5b505af1158015611e99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611ebd9190810190612b63565b9050600181121515611ed25760009350611ef6565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe93505b7f14b8f78bc0056726e64fe4da75cf492532421910d373685f39c105d0cdd501d28487604051611f27929190612fb0565b60405180910390a180945050505050919050565b60608060008060608573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611fa757600080fd5b505af1158015611fbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611fdf9190810190612b63565b60405190808252806020026020018201604052801561201257816020015b6060815260200190600190039081611ffd5790505b509350600092505b8573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561207e57600080fd5b505af1158015612092573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506120b69190810190612b63565b831215612636578573ffffffffffffffffffffffffffffffffffffffff1663846719e0846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016121129190612f20565b602060405180830381600087803b15801561212c57600080fd5b505af1158015612140573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506121649190810190612b11565b915061225661221b8373ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016121bf9061320e565b600060405180830381600087803b1580156121d957600080fd5b505af11580156121ed573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506122169190810190612bcd565b612642565b6040805190810160405280600181526020017f7c0000000000000000000000000000000000000000000000000000000000000081525061269b565b90506123138161230e8473ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016122b2906132ed565b600060405180830381600087803b1580156122cc57600080fd5b505af11580156122e0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506123099190810190612bcd565b612642565b61269b565b9050612354816040805190810160405280600181526020017f7c0000000000000000000000000000000000000000000000000000000000000081525061269b565b90506124118161240c8473ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016123b090613298565b600060405180830381600087803b1580156123ca57600080fd5b505af11580156123de573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506124079190810190612bcd565b612642565b61269b565b9050612452816040805190810160405280600181526020017f7c0000000000000000000000000000000000000000000000000000000000000081525061269b565b905061250f8161250a8473ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016124ae90613184565b600060405180830381600087803b1580156124c857600080fd5b505af11580156124dc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506125059190810190612bcd565b612642565b61269b565b9050612550816040805190810160405280600181526020017f7c0000000000000000000000000000000000000000000000000000000000000081525061269b565b905061260d816126088473ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016125ac906130fa565b600060405180830381600087803b1580156125c657600080fd5b505af11580156125da573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506126039190810190612bcd565b612642565b61269b565b905080848481518110151561261e57fe5b9060200190602002018190525082600101925061201a565b83945050505050919050565b6060600061264f8361286c565b1415612692576040805190810160405280600181526020017f20000000000000000000000000000000000000000000000000000000000000008152509050612696565b8190505b919050565b606080606080606060008088955087945084518651016040519080825280601f01601f1916602001820160405280156126e35781602001602082028038833980820191505090505b50935083925060009150600090505b85518110156127a557858181518110151561270957fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561276857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506126f2565b600090505b845181101561285d5784818151811015156127c157fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561282057fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506127aa565b83965050505050505092915050565b600081519050919050565b600082601f830112151561288a57600080fd5b813561289d612898826133a4565b613377565b9150818183526020840193506020810190508360005b838110156128e357813586016128c98882612951565b8452602084019350602083019250506001810190506128b3565b5050505092915050565b60006128f98251613495565b905092915050565b600061290d82516134a7565b905092915050565b600061292182516134b9565b905092915050565b600061293582516134cb565b905092915050565b600061294982516134dd565b905092915050565b600082601f830112151561296457600080fd5b8135612977612972826133cc565b613377565b9150808252602083016020830185838301111561299357600080fd5b61299e83828461350b565b50505092915050565b600082601f83011215156129ba57600080fd5b81356129cd6129c8826133f8565b613377565b915080825260208301602083018583830111156129e957600080fd5b6129f483828461350b565b50505092915050565b600082601f8301121515612a1057600080fd5b8151612a23612a1e826133f8565b613377565b91508082526020830160208301858383011115612a3f57600080fd5b612a4a83828461351a565b50505092915050565b60008060408385031215612a6657600080fd5b600083013567ffffffffffffffff811115612a8057600080fd5b612a8c85828601612877565b925050602083013567ffffffffffffffff811115612aa957600080fd5b612ab5858286016129a7565b9150509250929050565b600060208284031215612ad157600080fd5b6000612adf848285016128ed565b91505092915050565b600060208284031215612afa57600080fd5b6000612b0884828501612901565b91505092915050565b600060208284031215612b2357600080fd5b6000612b3184828501612915565b91505092915050565b600060208284031215612b4c57600080fd5b6000612b5a84828501612929565b91505092915050565b600060208284031215612b7557600080fd5b6000612b838482850161293d565b91505092915050565b600060208284031215612b9e57600080fd5b600082013567ffffffffffffffff811115612bb857600080fd5b612bc4848285016129a7565b91505092915050565b600060208284031215612bdf57600080fd5b600082015167ffffffffffffffff811115612bf957600080fd5b612c05848285016129fd565b91505092915050565b600080600060608486031215612c2357600080fd5b600084013567ffffffffffffffff811115612c3d57600080fd5b612c49868287016129a7565b935050602084013567ffffffffffffffff811115612c6657600080fd5b612c72868287016129a7565b925050604084013567ffffffffffffffff811115612c8f57600080fd5b612c9b868287016129a7565b9150509250925092565b6000612cb082613431565b80845260208401935083602082028501612cc985613424565b60005b84811015612d025783", "83038852612ce4838351612d85565b9250612cef82613452565b9150602088019750600181019050612ccc565b508196508694505050505092915050565b612d1c8161347f565b82525050565b612d2b816134e7565b82525050565b612d3a816134f9565b82525050565b612d498161348b565b82525050565b6000612d5a82613447565b808452612d6e81602086016020860161351a565b612d778161354d565b602085010191505092915050565b6000612d908261343c565b808452612da481602086016020860161351a565b612dad8161354d565b602085010191505092915050565b6000600882527f6578745f6a736f6e0000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600682527f6669785f696400000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f757064617465645f74696d6500000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f747970655f6964000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f637265617465645f74696d6500000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f747970655f6e616d6500000000000000000000000000000000000000000000006020830152604082019050919050565b6000602082019050612f1a6000830184612d13565b92915050565b6000602082019050612f356000830184612d40565b92915050565b6000604082019050612f506000830185612d40565b8181036020830152612f628184612ca5565b90509392505050565b6000606082019050612f806000830186612d40565b8181036020830152612f928185612ca5565b90508181036040830152612fa68184612d4f565b9050949350505050565b6000604082019050612fc56000830185612d40565b8181036020830152612fd78184612d4f565b90509392505050565b6000608082019050612ff56000830187612d40565b81810360208301526130078186612d4f565b9050818103604083015261301b8185612d4f565b9050818103606083015261302f8184612d4f565b905095945050505050565b600060208201905081810360008301526130548184612d85565b905092915050565b600060408201905081810360008301526130768185612d85565b90506130856020830184612d22565b9392505050565b600060408201905081810360008301526130a68185612d85565b90506130b56020830184612d31565b9392505050565b600060608201905081810360008301526130d68186612d85565b90506130e56020830185612d31565b6130f26040830184612d22565b949350505050565b6000602082019050818103600083015261311381612dbb565b9050919050565b6000604082019050818103600083015261313381612dbb565b905081810360208301526131478184612d4f565b905092915050565b6000604082019050818103600083015261316881612df2565b9050818103602083015261317c8184612d85565b905092915050565b6000602082019050818103600083015261319d81612e29565b9050919050565b600060408201905081810360008301526131bd81612e29565b905081810360208301526131d18184612d85565b905092915050565b600060408201905081810360008301526131f281612e29565b905081810360208301526132068184612d4f565b905092915050565b6000602082019050818103600083015261322781612e60565b9050919050565b6000604082019050818103600083015261324781612e60565b9050818103602083015261325b8184612d85565b905092915050565b6000604082019050818103600083015261327c81612e60565b905081810360208301526132908184612d4f565b905092915050565b600060208201905081810360008301526132b181612e97565b9050919050565b600060408201905081810360008301526132d181612e97565b905081810360208301526132e58184612d85565b905092915050565b6000602082019050818103600083015261330681612ece565b9050919050565b6000604082019050818103600083015261332681612ece565b9050818103602083015261333a8184612d85565b905092915050565b6000604082019050818103600083015261335b81612ece565b9050818103602083015261336f8184612d4f565b905092915050565b6000604051905081810181811067ffffffffffffffff8211171561339a57600080fd5b8060405250919050565b600067ffffffffffffffff8211156133bb57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156133e357600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561340f57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b60006134a08261345f565b9050919050565b60006134b28261345f565b9050919050565b60006134c48261345f565b9050919050565b60006134d68261345f565b9050919050565b6000819050919050565b60006134f28261345f565b9050919050565b60006135048261345f565b9050919050565b82818337600083830152505050565b60005b8381101561353857808201518184015260208101905061351d565b83811115613547576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058203865772e20a666e5d91147637876677930c452c547ee142634a7a13e3d37a5eb6c6578706572696d656e74616cf50037"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"", "dd919061314f565b600060405180830381600087803b158015610cf757600080fd5b505af1158015610d0b573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166309ff42f06040805190810160405280600a81526020017f6669785f69645f30303600000000000000000000000000000000000000000000815250846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d9b92919061305c565b602060405180830381600087803b158015610db557600080fd5b505af1158015610dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ded9190810190612b63565b9050600181121515610e025760009350610e26565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe93505b7f6b2f980959df7c69484eedc69946c27b3743d020380d5f3600dd0b0f57d0f4b18487604051610e57929190612fb0565b60405180910390a180945050505050919050565b60008060008060008060009450610e818961071c565b1515610eef577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff94507f231031b5a33d2c7c5550f8174512618ed672d52be443d80b5146746637935cba858a8a8a604051610edf9493929190612fe0565b60405180910390a1849550611419565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280601081526020017f6d656d6265725f617574685f74797065000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f9a919061303a565b602060405180830381600087803b158015610fb457600080fd5b505af1158015610fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610fec9190810190612b3a565b93508373ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561105257600080fd5b505af1158015611066573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061108a9190810190612abf565b92508273ffffffffffffffffffffffffffffffffffffffff1663ae763db58a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016110e1919061314f565b600060405180830381600087803b1580156110fb57600080fd5b505af115801561110f573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561117757600080fd5b505af115801561118b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111af9190810190612b11565b91508173ffffffffffffffffffffffffffffffffffffffff16631a391cb4896040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161120691906132ed565b600060405180830381600087803b15801561122057600080fd5b505af1158015611234573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb4886040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161128d91906131d9565b600060405180830381600087803b1580156112a757600080fd5b505af11580156112bb573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663664b37d66040805190810160405280600a81526020017f6669785f69645f3030360000000000000000000000000000000000000000000081525084866040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161134d939291906130bc565b602060405180830381600087803b15801561136757600080fd5b505af115801561137b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061139f9190810190612b63565b90506001811215156113b457600094506113d8565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe94505b7f231031b5a33d2c7c5550f8174512618ed672d52be443d80b5146746637935cba858a8a8a60405161140d9493929190612fe0565b60405180910390a18095505b50505050509392505050565b600080600080600080935061145187600081518110151561144257fe5b9060200190602002015161071c565b156114dc577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff93507fcb263a23d186eec891d55f1e0ba96ec8290af8c893d32d644c22dbff0953e51f8488886040516114ac93929190612f6b565b60405180910390a17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9450611b8d565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280601081526020017f6d656d6265725f617574685f74797065000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611587919061303a565b602060405180830381600087803b1580156115a157600080fd5b505af11580156115b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115d99190810190612b3a565b92508273ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561163f57600080fd5b505af1158015611653573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116779190810190612b11565b91508173ffffffffffffffffffffffffffffffffffffffff16631a391cb46040805190810160405280600a81526020017f6669785f69645f303036000000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016117039190613263565b600060405180830381600087803b15801561171d57600080fd5b505af1158015611731573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb488600081518110151561176057fe5b906020019060200201516040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016117a2919061311a565b600060405180830381600087803b1580156117bc57600080fd5b505af11580156117d0573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb48860018151811015156117ff57fe5b906020019060200201516040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161184191906132b8565b600060405180830381600087803b15801561185b57600080fd5b505af115801561186f573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb488600281518110151561189e57fe5b906020019060200201516040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016118e0919061322e565b600060405180830381600087803b1580156118fa57600080fd5b505af115801561190e573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb488600381518110151561193d57fe5b906020019060200201516040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161197f91906131a4565b600060405180830381600087803b15801561199957600080fd5b505af11580156119ad573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb4876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611a069190613342565b600060405180830381600087803b158015611a2057600080fd5b505af1158015611a34573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16634c6f30c06040805190810160405280600a81526020017f6669785f69645f30303600000000000000000000000000000000000000000000815250846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611ac492919061308c565b602060405180830381600087803b158015611ade57600080fd5b505af1158015611af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b169190810190612b63565b90506001811415611b2a5760009350611b4e565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe93505b7fcb263a23d186eec891d55f1e0ba96ec8290af8c893d32d644c22dbff0953e51f848888604051611b8193929190612f6b565b60405180910390a18094505b5050505092915050565b600060606000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280601081526020017f6d656d6265725f617574685f74797065000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611c49919061303a565b602060405180830381600087803b158015611c6357600080fd5b505af1158015611c77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c9b9190810190612b3a565b91508173ffffffffffffffffffffffffffffffffffffffff1663d8ac59576040805190810160405280600a81526020017f6669785f69645f3030", "36000000000000000000000000000000000000000000008152508473ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611d5357600080fd5b505af1158015611d67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d8b9190810190612abf565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611dc492919061305c565b602060405180830381600087803b158015611dde57600080fd5b505af1158015611df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611e169190810190612ae8565b90508073ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611e7c57600080fd5b505af1158015611e90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611eb49190810190612b63565b60001415611f22577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd6000604051908082528060200260200182016040528015611f1257816020015b6060815260200190600190039081611efd5790505b5081915080905093509350611f35565b6000611f2d82611f3b565b819150935093505b50509091565b60608060008060608573ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611fa757600080fd5b505af1158015611fbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611fdf9190810190612b63565b60405190808252806020026020018201604052801561201257816020015b6060815260200190600190039081611ffd5790505b509350600092505b8573ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561207e57600080fd5b505af1158015612092573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506120b69190810190612b63565b831215612636578573ffffffffffffffffffffffffffffffffffffffff16633dd2b614846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016121129190612f20565b602060405180830381600087803b15801561212c57600080fd5b505af1158015612140573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506121649190810190612b11565b915061225661221b8373ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016121bf906130fa565b600060405180830381600087803b1580156121d957600080fd5b505af11580156121ed573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506122169190810190612bcd565b612642565b6040805190810160405280600181526020017f7c0000000000000000000000000000000000000000000000000000000000000081525061269b565b90506123138161230e8473ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016122b290613298565b600060405180830381600087803b1580156122cc57600080fd5b505af11580156122e0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506123099190810190612bcd565b612642565b61269b565b9050612354816040805190810160405280600181526020017f7c0000000000000000000000000000000000000000000000000000000000000081525061269b565b90506124118161240c8473ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016123b09061320e565b600060405180830381600087803b1580156123ca57600080fd5b505af11580156123de573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506124079190810190612bcd565b612642565b61269b565b9050612452816040805190810160405280600181526020017f7c0000000000000000000000000000000000000000000000000000000000000081525061269b565b905061250f8161250a8473ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016124ae90613184565b600060405180830381600087803b1580156124c857600080fd5b505af11580156124dc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506125059190810190612bcd565b612642565b61269b565b9050612550816040805190810160405280600181526020017f7c0000000000000000000000000000000000000000000000000000000000000081525061269b565b905061260d816126088473ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016125ac90613322565b600060405180830381600087803b1580156125c657600080fd5b505af11580156125da573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506126039190810190612bcd565b612642565b61269b565b905080848481518110151561261e57fe5b9060200190602002018190525082600101925061201a565b83945050505050919050565b6060600061264f8361286c565b1415612692576040805190810160405280600181526020017f20000000000000000000000000000000000000000000000000000000000000008152509050612696565b8190505b919050565b606080606080606060008088955087945084518651016040519080825280601f01601f1916602001820160405280156126e35781602001602082028038833980820191505090505b50935083925060009150600090505b85518110156127a557858181518110151561270957fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561276857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506126f2565b600090505b845181101561285d5784818151811015156127c157fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561282057fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506127aa565b83965050505050505092915050565b600081519050919050565b600082601f830112151561288a57600080fd5b813561289d612898826133a4565b613377565b9150818183526020840193506020810190508360005b838110156128e357813586016128c98882612951565b8452602084019350602083019250506001810190506128b3565b5050505092915050565b60006128f98251613495565b905092915050565b600061290d82516134a7565b905092915050565b600061292182516134b9565b905092915050565b600061293582516134cb565b905092915050565b600061294982516134dd565b905092915050565b600082601f830112151561296457600080fd5b8135612977612972826133cc565b613377565b9150808252602083016020830185838301111561299357600080fd5b61299e83828461350b565b50505092915050565b600082601f83011215156129ba57600080fd5b81356129cd6129c8826133f8565b613377565b915080825260208301602083018583830111156129e957600080fd5b6129f483828461350b565b50505092915050565b600082601f8301121515612a1057600080fd5b8151612a23612a1e826133f8565b613377565b91508082526020830160208301858383011115612a3f57600080fd5b612a4a83828461351a565b50505092915050565b60008060408385031215612a6657600080fd5b600083013567ffffffffffffffff811115612a8057600080fd5b612a8c85828601612877565b925050602083013567ffffffffffffffff811115612aa957600080fd5b612ab5858286016129a7565b9150509250929050565b600060208284031215612ad157600080fd5b6000612adf848285016128ed565b91505092915050565b600060208284031215612afa57600080fd5b6000612b0884828501612901565b91505092915050565b600060208284031215612b2357600080fd5b6000612b3184828501612915565b91505092915050565b600060208284031215612b4c57600080fd5b6000612b5a84828501612929565b91505092915050565b600060208284031215612b7557600080fd5b6000612b838482850161293d565b91505092915050565b600060208284031215612b9e57600080fd5b600082013567ffffffffffffffff811115612bb857600080fd5b612bc4848285016129a7565b91505092915050565b600060208284031215612bdf57600080fd5b600082015167ffffffffffffffff811115612bf957600080fd5b612c05848285016129fd565b91505092915050565b600080600060608486031215612c2357600080fd5b600084013567ffffffffffffffff811115612c3d57600080fd5b612c49868287016129a7565b935050602084013567ffffffffffffffff811115612c6657600080fd5b612c72868287016129a7565b925050604084013567ffffffffffffffff811115612c8f57600080fd5b612c9b868287016129a7565b9150509250925092565b6000612cb082613431565b80845260208401935083602082028501612cc985613424565b60005b84811015612d025783", "83038852612ce4838351612d85565b9250612cef82613452565b9150602088019750600181019050612ccc565b508196508694505050505092915050565b612d1c8161347f565b82525050565b612d2b816134e7565b82525050565b612d3a816134f9565b82525050565b612d498161348b565b82525050565b6000612d5a82613447565b808452612d6e81602086016020860161351a565b612d778161354d565b602085010191505092915050565b6000612d908261343c565b808452612da481602086016020860161351a565b612dad8161354d565b602085010191505092915050565b6000600782527f747970655f6964000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f757064617465645f74696d6500000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f637265617465645f74696d6500000000000000000000000000000000000000006020830152604082019050919050565b6000600682527f6669785f696400000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f747970655f6e616d6500000000000000000000000000000000000000000000006020830152604082019050919050565b6000600882527f6578745f6a736f6e0000000000000000000000000000000000000000000000006020830152604082019050919050565b6000602082019050612f1a6000830184612d13565b92915050565b6000602082019050612f356000830184612d40565b92915050565b6000604082019050612f506000830185612d40565b8181036020830152612f628184612ca5565b90509392505050565b6000606082019050612f806000830186612d40565b8181036020830152612f928185612ca5565b90508181036040830152612fa68184612d4f565b9050949350505050565b6000604082019050612fc56000830185612d40565b8181036020830152612fd78184612d4f565b90509392505050565b6000608082019050612ff56000830187612d40565b81810360208301526130078186612d4f565b9050818103604083015261301b8185612d4f565b9050818103606083015261302f8184612d4f565b905095945050505050565b600060208201905081810360008301526130548184612d85565b905092915050565b600060408201905081810360008301526130768185612d85565b90506130856020830184612d22565b9392505050565b600060408201905081810360008301526130a68185612d85565b90506130b56020830184612d31565b9392505050565b600060608201905081810360008301526130d68186612d85565b90506130e56020830185612d31565b6130f26040830184612d22565b949350505050565b6000602082019050818103600083015261311381612dbb565b9050919050565b6000604082019050818103600083015261313381612dbb565b905081810360208301526131478184612d85565b905092915050565b6000604082019050818103600083015261316881612dbb565b9050818103602083015261317c8184612d4f565b905092915050565b6000602082019050818103600083015261319d81612df2565b9050919050565b600060408201905081810360008301526131bd81612df2565b905081810360208301526131d18184612d85565b905092915050565b600060408201905081810360008301526131f281612df2565b905081810360208301526132068184612d4f565b905092915050565b6000602082019050818103600083015261322781612e29565b9050919050565b6000604082019050818103600083015261324781612e29565b9050818103602083015261325b8184612d85565b905092915050565b6000604082019050818103600083015261327c81612e60565b905081810360208301526132908184612d85565b905092915050565b600060208201905081810360008301526132b181612e97565b9050919050565b600060408201905081810360008301526132d181612e97565b905081810360208301526132e58184612d85565b905092915050565b6000604082019050818103600083015261330681612e97565b9050818103602083015261331a8184612d4f565b905092915050565b6000602082019050818103600083015261333b81612ece565b9050919050565b6000604082019050818103600083015261335b81612ece565b9050818103602083015261336f8184612d4f565b905092915050565b6000604051905081810181811067ffffffffffffffff8211171561339a57600080fd5b8060405250919050565b600067ffffffffffffffff8211156133bb57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156133e357600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561340f57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b60006134a08261345f565b9050919050565b60006134b28261345f565b9050919050565b60006134c48261345f565b9050919050565b60006134d68261345f565b9050919050565b6000819050919050565b60006134f28261345f565b9050919050565b60006135048261345f565b9050919050565b82818337600083830152505050565b60005b8381101561353857808201518184015260208101905061351d565b83811115613547576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820f02d97234333d662792dfe6f5169ae37634a00e0afc602de39f7290c8c9b124f6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"type_id\",\"type\":\"string\"},{\"name\":\"type_name\",\"type\":\"string\"},{\"name\":\"updated_time\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"type_id\",\"type\":\"string\"}],\"name\":\"isExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"type_id\",\"type\":\"string\"},{\"name\":\"ext_json\",\"type\":\"string\"},{\"name\":\"updated_time\",\"type\":\"string\"}],\"name\":\"updateExtJson\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"selectAll\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"params\",\"type\":\"string[]\"},{\"name\":\"ext_json\",\"type\":\"string\"}],\"name\":\"insert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"type_id\",\"type\":\"string\"}],\"name\":\"deleteByTypeId\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret_code\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"params\",\"type\":\"string[]\"},{\"indexed\":false,\"name\":\"ext_json\",\"type\":\"string\"}],\"name\":\"insertEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret_code\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"type_id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"type_name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"updated_time\",\"type\":\"string\"}],\"name\":\"updateEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret_code\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"type_id\",\"type\":\"string\"}],\"name\":\"deleteByTypeIdEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret_code\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"type_id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"ext_json\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"updated_time\",\"type\":\"string\"}],\"name\":\"updateExtJsonEvent\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_UPDATE = "update";

    public static final String FUNC_ISEXIST = "isExist";

    public static final String FUNC_UPDATEEXTJSON = "updateExtJson";

    public static final String FUNC_SELECTALL = "selectAll";

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_DELETEBYTYPEID = "deleteByTypeId";

    public static final Event INSERTEVENT_EVENT = new Event("insertEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event UPDATEEVENT_EVENT = new Event("updateEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event DELETEBYTYPEIDEVENT_EVENT = new Event("deleteByTypeIdEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event UPDATEEXTJSONEVENT_EVENT = new Event("updateExtJsonEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    protected MemberAuthTypeContract(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt update(String type_id, String type_name, String updated_time) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new Utf8String(type_id),
                new Utf8String(type_name),
                new Utf8String(updated_time)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void update(String type_id, String type_name, String updated_time, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new Utf8String(type_id),
                new Utf8String(type_name),
                new Utf8String(updated_time)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdate(String type_id, String type_name, String updated_time) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new Utf8String(type_id),
                new Utf8String(type_name),
                new Utf8String(updated_time)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getUpdateInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getUpdateOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Boolean isExist(String type_id) throws ContractException {
        final Function function = new Function(FUNC_ISEXIST, 
                Arrays.<Type>asList(new Utf8String(type_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt updateExtJson(String type_id, String ext_json, String updated_time) {
        final Function function = new Function(
                FUNC_UPDATEEXTJSON, 
                Arrays.<Type>asList(new Utf8String(type_id),
                new Utf8String(ext_json),
                new Utf8String(updated_time)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updateExtJson(String type_id, String ext_json, String updated_time, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEEXTJSON, 
                Arrays.<Type>asList(new Utf8String(type_id),
                new Utf8String(ext_json),
                new Utf8String(updated_time)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateExtJson(String type_id, String ext_json, String updated_time) {
        final Function function = new Function(
                FUNC_UPDATEEXTJSON, 
                Arrays.<Type>asList(new Utf8String(type_id),
                new Utf8String(ext_json),
                new Utf8String(updated_time)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getUpdateExtJsonInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEEXTJSON, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getUpdateExtJsonOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATEEXTJSON, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple2<BigInteger, List<String>> selectAll() throws ContractException {
        final Function function = new Function(FUNC_SELECTALL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, List<String>>(
                (BigInteger) results.get(0).getValue(), 
                convertToNative((List<Utf8String>) results.get(1).getValue()));
    }

    public TransactionReceipt insert(List<String> params, String ext_json) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(params.isEmpty()? DynamicArray.empty("string[]"):new DynamicArray<Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(params, Utf8String.class)),
                new Utf8String(ext_json)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void insert(List<String> params, String ext_json, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(params.isEmpty()? DynamicArray.empty("string[]"):new DynamicArray<Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(params, Utf8String.class)),
                new Utf8String(ext_json)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsert(List<String> params, String ext_json) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(params.isEmpty()? DynamicArray.empty("string[]"):new DynamicArray<Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(params, Utf8String.class)),
                new Utf8String(ext_json)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<List<String>, String> getInsertInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<List<String>, String>(

                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getInsertOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt deleteByTypeId(String type_id) {
        final Function function = new Function(
                FUNC_DELETEBYTYPEID, 
                Arrays.<Type>asList(new Utf8String(type_id)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void deleteByTypeId(String type_id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEBYTYPEID, 
                Arrays.<Type>asList(new Utf8String(type_id)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteByTypeId(String type_id) {
        final Function function = new Function(
                FUNC_DELETEBYTYPEID, 
                Arrays.<Type>asList(new Utf8String(type_id)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDeleteByTypeIdInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEBYTYPEID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getDeleteByTypeIdOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_DELETEBYTYPEID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public List<InsertEventEventResponse> getInsertEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTEVENT_EVENT, transactionReceipt);
        ArrayList<InsertEventEventResponse> responses = new ArrayList<InsertEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            InsertEventEventResponse typedResponse = new InsertEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret_code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.params = (List<String>) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.ext_json = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeInsertEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeInsertEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UpdateEventEventResponse> getUpdateEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEEVENT_EVENT, transactionReceipt);
        ArrayList<UpdateEventEventResponse> responses = new ArrayList<UpdateEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateEventEventResponse typedResponse = new UpdateEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret_code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.type_id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.type_name = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.updated_time = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUpdateEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUpdateEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<DeleteByTypeIdEventEventResponse> getDeleteByTypeIdEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEBYTYPEIDEVENT_EVENT, transactionReceipt);
        ArrayList<DeleteByTypeIdEventEventResponse> responses = new ArrayList<DeleteByTypeIdEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DeleteByTypeIdEventEventResponse typedResponse = new DeleteByTypeIdEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret_code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.type_id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeDeleteByTypeIdEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(DELETEBYTYPEIDEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeDeleteByTypeIdEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(DELETEBYTYPEIDEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UpdateExtJsonEventEventResponse> getUpdateExtJsonEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEEXTJSONEVENT_EVENT, transactionReceipt);
        ArrayList<UpdateExtJsonEventEventResponse> responses = new ArrayList<UpdateExtJsonEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateExtJsonEventEventResponse typedResponse = new UpdateExtJsonEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret_code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.type_id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.ext_json = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.updated_time = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUpdateExtJsonEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEEXTJSONEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUpdateExtJsonEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEEXTJSONEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static MemberAuthTypeContract load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new MemberAuthTypeContract(contractAddress, client, credential);
    }

    public static MemberAuthTypeContract deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(MemberAuthTypeContract.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class InsertEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret_code;

        public List<String> params;

        public String ext_json;
    }

    public static class UpdateEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret_code;

        public String type_id;

        public String type_name;

        public String updated_time;
    }

    public static class DeleteByTypeIdEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret_code;

        public String type_id;
    }

    public static class UpdateExtJsonEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret_code;

        public String type_id;

        public String ext_json;

        public String updated_time;
    }
}
