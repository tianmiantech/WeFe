package com.welab.wefe.manager.service.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class TrustCertsContract extends Contract {
    public static final String[] BINARY_ARRAY = {"","00000000000000000000815250846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610caa929190611d55565b602060405180830381600087803b158015610cc457600080fd5b505af1158015610cd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610cfc91908101906117d6565b90506001811415610d105760009350610d34565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe93505b7f5157dc1ab0b55c7621be94a34b2ae4228f7d16e8271628060cc027b1a513b12f848888604051610d6793929190611c8e565b60405180910390a18394505b5050505092915050565b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600b81526020017f74727573745f63657274730000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e2e9190611d03565b602060405180830381600087803b158015610e4857600080fd5b505af1158015610e5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e8091908101906117ad565b92508273ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610ee657600080fd5b505af1158015610efa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f1e9190810190611732565b91508173ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f759190611dba565b600060405180830381600087803b158015610f8f57600080fd5b505af1158015610fa3573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e8434e396040805190810160405280600b81526020017f74727573745f6365727473000000000000000000000000000000000000000000815250846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611033929190611d25565b602060405180830381600087803b15801561104d57600080fd5b505af1158015611061573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611085919081019061175b565b905060008173ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156110ed57600080fd5b505af1158015611101573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061112591908101906117d6565b11156111345760019350611139565b600093505b505050919050565b600080600080600080935061115586610d7d565b15156111bf577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd93507fab5c4c2b31ebe23a798a16e7190d255d5b2f2c55e4bf1c99c3c97e625923b04a84876040516111af929190611cd3565b60405180910390a1839450611537565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600b81526020017f74727573745f63657274730000000000000000000000000000000000000000008152506040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161126a9190611d03565b602060405180830381600087803b15801561128457600080fd5b505af1158015611298573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112bc91908101906117ad565b92508273ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561132257600080fd5b505af1158015611336573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061135a9190810190611732565b91508173ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113b19190611dba565b600060405180830381600087803b1580156113cb57600080fd5b505af11580156113df573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166328bb21176040805190810160405280600b81526020017f74727573745f6365727473000000000000000000000000000000000000000000815250846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161146f929190611d25565b602060405180830381600087803b15801561148957600080fd5b505af115801561149d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114c191908101906117d6565b90506001811215156114d657600093506114fa565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe93505b7fab5c4c2b31ebe23a798a16e7190d255d5b2f2c55e4bf1c99c3c97e625923b04a848760405161152b929190611cd3565b60405180910390a18394505b50505050919050565b600082601f830112151561155357600080fd5b8135611566611561826120cd565b6120a0565b9150818183526020840193506020810190508360005b838110156115ac5781358601611592888261161a565b84526020840193506020830192505060018101905061157c565b5050505092915050565b60006115c282516121be565b905092915050565b60006115d682516121d0565b905092915050565b60006115ea82516121e2565b905092915050565b60006115fe82516121f4565b905092915050565b60006116128251612206565b905092915050565b600082601f830112151561162d57600080fd5b813561164061163b826120f5565b6120a0565b9150808252602083016020830185838301111561165c57600080fd5b611667838284612234565b50505092915050565b600082601f830112151561168357600080fd5b813561169661169182612121565b6120a0565b915080825260208301602083018583830111156116b257600080fd5b6116bd838284612234565b50505092915050565b600080604083850312156116d957600080fd5b600083013567ffffffffffffffff8111156116f357600080fd5b6116ff85828601611540565b925050602083013567ffffffffffffffff81111561171c57600080fd5b61172885828601611670565b9150509250929050565b60006020828403121561174457600080fd5b6000611752848285016115b6565b91505092915050565b60006020828403121561176d57600080fd5b600061177b848285016115ca565b91505092915050565b60006020828403121561179657600080fd5b60006117a4848285016115de565b91505092915050565b6000602082840312156117bf57600080fd5b60006117cd848285016115f2565b91505092915050565b6000602082840312156117e857600080fd5b60006117f684828501611606565b91505092915050565b60006020828403121561181157600080fd5b600082013567ffffffffffffffff81111561182b57600080fd5b61183784828501611670565b91505092915050565b600061184b8261215a565b808452602084019350836020820285016118648561214d565b60005b8481101561189d57838303885261187f838351611920565b925061188a8261217b565b9150602088019750600181019050611867565b508196508694505050505092915050565b6118b7816121a8565b82525050565b6118c681612210565b82525050565b6118d581612222565b82525050565b6118e4816121b4565b82525050565b60006118f582612170565b808452611909816020860160208601612243565b61191281612276565b602085010191505092915050565b600061192b82612165565b80845261193f816020860160208601612243565b61194881612276565b602085010191505092915050565b6000600d82527f73657269616c5f6e756d626572000000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f6973737565725f6f7267000000000000000000000000000000000000000000006020830152604082019050919050565b6000600882527f6578745f6a736f6e0000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f705f636572745f696400000000000000000000000000000000000000000000006020830152604082019050919050565b6000600682527f6669785f696400000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600b82527f7375626a6563745f6f72670000000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f69735f726f6f745f6365727400000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f636572745f6964000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f757064617465645f74696d6500000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f636572745f636f6e74656e7400000000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f69735f63615f63657274000000000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f6973737565725f636e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f7375626a6563745f636e000000000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f637265617465645f74696d6500000000000000000000000000000000000000006020830152604082019050919050565b6000602082019050611c6d","60008301846118ae565b92915050565b6000602082019050611c8860008301846118db565b92915050565b6000606082019050611ca360008301866118db565b8181036020830152611cb58185611840565b90508181036040830152611cc981846118ea565b9050949350505050565b6000604082019050611ce860008301856118db565b8181036020830152611cfa81846118ea565b90509392505050565b60006020820190508181036000830152611d1d8184611920565b905092915050565b60006040820190508181036000830152611d3f8185611920565b9050611d4e60208301846118bd565b9392505050565b60006040820190508181036000830152611d6f8185611920565b9050611d7e60208301846118cc565b9392505050565b60006040820190508181036000830152611d9e81611956565b90508181036020830152611db28184611920565b905092915050565b60006040820190508181036000830152611dd381611956565b90508181036020830152611de781846118ea565b905092915050565b60006040820190508181036000830152611e088161198d565b90508181036020830152611e1c8184611920565b905092915050565b60006040820190508181036000830152611e3d816119c4565b90508181036020830152611e5181846118ea565b905092915050565b60006040820190508181036000830152611e72816119fb565b90508181036020830152611e868184611920565b905092915050565b60006040820190508181036000830152611ea781611a32565b90508181036020830152611ebb8184611920565b905092915050565b60006040820190508181036000830152611edc81611a69565b90508181036020830152611ef08184611920565b905092915050565b60006040820190508181036000830152611f1181611aa0565b90508181036020830152611f258184611920565b905092915050565b60006040820190508181036000830152611f4681611ad7565b90508181036020830152611f5a8184611920565b905092915050565b60006040820190508181036000830152611f7b81611b0e565b90508181036020830152611f8f8184611920565b905092915050565b60006040820190508181036000830152611fb081611b45565b90508181036020830152611fc48184611920565b905092915050565b60006040820190508181036000830152611fe581611b7c565b90508181036020830152611ff98184611920565b905092915050565b6000604082019050818103600083015261201a81611bb3565b9050818103602083015261202e8184611920565b905092915050565b6000604082019050818103600083015261204f81611bea565b905081810360208301526120638184611920565b905092915050565b6000604082019050818103600083015261208481611c21565b905081810360208301526120988184611920565b905092915050565b6000604051905081810181811067ffffffffffffffff821117156120c357600080fd5b8060405250919050565b600067ffffffffffffffff8211156120e457600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561210c57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561213857600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b60006121c982612188565b9050919050565b60006121db82612188565b9050919050565b60006121ed82612188565b9050919050565b60006121ff82612188565b9050919050565b6000819050919050565b600061221b82612188565b9050919050565b600061222d82612188565b9050919050565b82818337600083830152505050565b60005b83811015612261578082015181840152602081019050612246565b83811115612270576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058207851e82fcbb18600c4265d591da824c87f9f5ebad0e4158d2e7890ff0ee183126c6578706572696d656e74616cf50037"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040523480156200001157600080fd5b506110016000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c92a78016040805190810160405280600b81526020017f74727573745f63657274730000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401620001019190620002e2565b602060405180830381600087803b1580156200011c57600080fd5b505af115801562000131573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000157919081019062000174565b506200038c565b60006200016c82516200033b565b905092915050565b6000602082840312156200018757600080fd5b600062000197848285016200015e565b91505092915050565b6000620001ad8262000330565b808452620001c381602086016020860162000345565b620001ce816200037b565b602085010191505092915050565b6000600682527f6669785f696400000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000609382527f636572745f69642c73657269616c5f6e756d6265722c636572745f636f6e746560208301527f6e742c705f636572745f69642c6973737565725f6f72672c6973737565725f6360408301527f6e2c7375626a6563745f6f72672c7375626a6563745f636e2c69735f63615f6360608301527f6572742c69735f726f6f745f636572742c637265617465645f74696d652c757060808301527f64617465645f74696d652c6578745f6a736f6e0000000000000000000000000060a083015260c082019050919050565b60006060820190508181036000830152620002fe8184620001a0565b905081810360208301526200031381620001dc565b90508181036040830152620003288162000213565b905092915050565b600081519050919050565b6000819050919050565b60005b838110156200036557808201518184015260208101905062000348565b8381111562000375576000848401525b50505050565b6000601f19601f8301169050919050565b6122c1806200039c6000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806351cb56a91461005c5780637f02314d146100995780639eb03ade146100d6575b600080fd5b34801561006857600080fd5b50610083600480360361007e91908101906117ff565b610113565b6040516100909190611c58565b60405180910390f35b3480156100a557600080fd5b506100c060048036036100bb91908101906117ff565b6104d7565b6040516100cd9190611c73565b60405180910390f35b3480156100e257600080fd5b506100fd60048036036100f891908101906116c6565b6108d6565b60405161010a9190611c73565b60405180910390f35b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600b81526020017f74727573745f63657274730000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016101c49190611d03565b602060405180830381600087803b1580156101de57600080fd5b505af11580156101f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061021691908101906117ad565b92508273ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561027c57600080fd5b505af1158015610290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506102b49190810190611732565b91508173ffffffffffffffffffffffffffffffffffffffff1663ae763db5866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161030b9190611f62565b600060405180830381600087803b15801561032557600080fd5b505af1158015610339573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663d8ac59576040805190810160405280600b81526020017f74727573745f6365727473000000000000000000000000000000000000000000815250846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016103c9929190611d25565b602060405180830381600087803b1580156103e357600080fd5b505af11580156103f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061041b919081019061175b565b905060008173ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561048357600080fd5b505af1158015610497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104bb91908101906117d6565b11156104ca57600193506104cf565b600093505b505050919050565b60008060008060008093506104eb86610113565b1515610555577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd93507fd79cdb3d95a935cc66f6548035697f1df53084a477864dae817102560b440ac08487604051610545929190611cd3565b60405180910390a18394506108cd565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600b81526020017f74727573745f63657274730000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016106009190611d03565b602060405180830381600087803b15801561061a57600080fd5b505af115801561062e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061065291908101906117ad565b92508273ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156106b857600080fd5b505af11580156106cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506106f09190810190611732565b91508173ffffffffffffffffffffffffffffffffffffffff1663ae763db5876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016107479190611f62565b600060405180830381600087803b15801561076157600080fd5b505af1158015610775573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166309ff42f06040805190810160405280600b81526020017f74727573745f6365727473000000000000000000000000000000000000000000815250846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610805929190611d25565b602060405180830381600087803b15801561081f57600080fd5b505af1158015610833573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061085791908101906117d6565b905060018112151561086c5760009350610890565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe93505b7fd79cdb3d95a935cc66f6548035697f1df53084a477864dae817102560b440ac084876040516108c1929190611cd3565b60405180910390a18394505b50505050919050565b60008060008060008093506109028760018151811015156108f357fe5b90602001906020020151610113565b1561098d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff93507fcb263a23d186eec891d55f1e0ba96ec8290af8c893d32d644c22dbff0953e51f84888860405161095d93929190611c8e565b60405180910390a17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9450611536565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600b81526020017f74727573745f63657274730000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610a389190611d03565b602060405180830381600087803b158015610a5257600080fd5b505af1158015610a66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a8a91908101906117ad565b92508273ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610af057600080fd5b505af1158015610b04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b289190810190611784565b91508173ffffffffffffffffffffffffffffffffffffffff16631a391cb46040805190810160405280600b81526020017f74727573745f63657274730000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610bb49190611fcc565b600060405180830381600087803b158015610bce57600080fd5b505af1158015610be2573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb4886000815181101515610c1157fe5b906020019060200201516040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610c539190611ec3565b600060405180830381600087803b1580","","60008301846118ae565b92915050565b6000602082019050611c8860008301846118db565b92915050565b6000606082019050611ca360008301866118db565b8181036020830152611cb58185611840565b90508181036040830152611cc981846118ea565b9050949350505050565b6000604082019050611ce860008301856118db565b8181036020830152611cfa81846118ea565b90509392505050565b60006020820190508181036000830152611d1d8184611920565b905092915050565b60006040820190508181036000830152611d3f8185611920565b9050611d4e60208301846118bd565b9392505050565b60006040820190508181036000830152611d6f8185611920565b9050611d7e60208301846118cc565b9392505050565b60006040820190508181036000830152611d9e81611956565b90508181036020830152611db28184611920565b905092915050565b60006040820190508181036000830152611dd38161198d565b90508181036020830152611de78184611920565b905092915050565b60006040820190508181036000830152611e08816119c4565b90508181036020830152611e1c8184611920565b905092915050565b60006040820190508181036000830152611e3d816119fb565b90508181036020830152611e518184611920565b905092915050565b60006040820190508181036000830152611e7281611a32565b90508181036020830152611e868184611920565b905092915050565b60006040820190508181036000830152611ea781611a69565b90508181036020830152611ebb8184611920565b905092915050565b60006040820190508181036000830152611edc81611aa0565b90508181036020830152611ef08184611920565b905092915050565b60006040820190508181036000830152611f1181611ad7565b90508181036020830152611f258184611920565b905092915050565b60006040820190508181036000830152611f4681611b0e565b90508181036020830152611f5a8184611920565b905092915050565b60006040820190508181036000830152611f7b81611b0e565b90508181036020830152611f8f81846118ea565b905092915050565b60006040820190508181036000830152611fb081611b45565b90508181036020830152611fc48184611920565b905092915050565b60006040820190508181036000830152611fe581611b7c565b90508181036020830152611ff98184611920565b905092915050565b6000604082019050818103600083015261201a81611bb3565b9050818103602083015261202e8184611920565b905092915050565b6000604082019050818103600083015261204f81611bea565b905081810360208301526120638184611920565b905092915050565b6000604082019050818103600083015261208481611c21565b9050818103602083015261209881846118ea565b905092915050565b6000604051905081810181811067ffffffffffffffff821117156120c357600080fd5b8060405250919050565b600067ffffffffffffffff8211156120e457600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561210c57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561213857600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b60006121c982612188565b9050919050565b60006121db82612188565b9050919050565b60006121ed82612188565b9050919050565b60006121ff82612188565b9050919050565b6000819050919050565b600061221b82612188565b9050919050565b600061222d82612188565b9050919050565b82818337600083830152505050565b60005b83811015612261578082015181840152602081019050612246565b83811115612270576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a7230582029423a24e7a5b3efbe4dc8955c0a881958e62cf421a97e4652073bae74e77b1f6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"params\",\"type\":\"string[]\"},{\"name\":\"ext_json\",\"type\":\"string\"}],\"name\":\"insert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"serial_number\",\"type\":\"string\"}],\"name\":\"isExistBySerialNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"serial_number\",\"type\":\"string\"}],\"name\":\"deleteBySerialNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret_code\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"params\",\"type\":\"string[]\"},{\"indexed\":false,\"name\":\"ext_json\",\"type\":\"string\"}],\"name\":\"insertEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret_code\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"serial_number\",\"type\":\"string\"}],\"name\":\"deleteBySerialNumberEvent\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_ISEXISTBYSERIALNUMBER = "isExistBySerialNumber";

    public static final String FUNC_DELETEBYSERIALNUMBER = "deleteBySerialNumber";

    public static final Event INSERTEVENT_EVENT = new Event("insertEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event DELETEBYSERIALNUMBEREVENT_EVENT = new Event("deleteBySerialNumberEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}));
    ;

    protected TrustCertsContract(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt insert(List<String> params, String ext_json) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(params.isEmpty()? DynamicArray.empty("string[]"):new DynamicArray<Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(params, Utf8String.class)),
                new Utf8String(ext_json)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void insert(List<String> params, String ext_json, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(params.isEmpty()? DynamicArray.empty("string[]"):new DynamicArray<Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(params, Utf8String.class)),
                new Utf8String(ext_json)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsert(List<String> params, String ext_json) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(params.isEmpty()? DynamicArray.empty("string[]"):new DynamicArray<Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(params, Utf8String.class)),
                new Utf8String(ext_json)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<List<String>, String> getInsertInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<List<String>, String>(

                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getInsertOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Boolean isExistBySerialNumber(String serial_number) throws ContractException {
        final Function function = new Function(FUNC_ISEXISTBYSERIALNUMBER, 
                Arrays.<Type>asList(new Utf8String(serial_number)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt deleteBySerialNumber(String serial_number) {
        final Function function = new Function(
                FUNC_DELETEBYSERIALNUMBER, 
                Arrays.<Type>asList(new Utf8String(serial_number)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void deleteBySerialNumber(String serial_number, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEBYSERIALNUMBER, 
                Arrays.<Type>asList(new Utf8String(serial_number)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteBySerialNumber(String serial_number) {
        final Function function = new Function(
                FUNC_DELETEBYSERIALNUMBER, 
                Arrays.<Type>asList(new Utf8String(serial_number)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDeleteBySerialNumberInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEBYSERIALNUMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getDeleteBySerialNumberOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_DELETEBYSERIALNUMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public List<InsertEventEventResponse> getInsertEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTEVENT_EVENT, transactionReceipt);
        ArrayList<InsertEventEventResponse> responses = new ArrayList<InsertEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            InsertEventEventResponse typedResponse = new InsertEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret_code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.params = (List<String>) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.ext_json = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeInsertEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeInsertEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<DeleteBySerialNumberEventEventResponse> getDeleteBySerialNumberEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEBYSERIALNUMBEREVENT_EVENT, transactionReceipt);
        ArrayList<DeleteBySerialNumberEventEventResponse> responses = new ArrayList<DeleteBySerialNumberEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DeleteBySerialNumberEventEventResponse typedResponse = new DeleteBySerialNumberEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret_code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.serial_number = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeDeleteBySerialNumberEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(DELETEBYSERIALNUMBEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeDeleteBySerialNumberEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(DELETEBYSERIALNUMBEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static TrustCertsContract load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new TrustCertsContract(contractAddress, client, credential);
    }

    public static TrustCertsContract deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(TrustCertsContract.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class InsertEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret_code;

        public List<String> params;

        public String ext_json;
    }

    public static class DeleteBySerialNumberEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret_code;

        public String serial_number;
    }
}
